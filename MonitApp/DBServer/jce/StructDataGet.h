// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __STRUCTDATAGET_H_
#define __STRUCTDATAGET_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "imageInfo.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace MonitApp
{
    struct GetImageListReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "MonitApp.GetImageListReq";
        }
        static string MD5()
        {
            return "6e548c174fd20f918aa16bfb2081f994";
        }
        GetImageListReq()
        :dateStart(""),dateEnd(""),idStart(0),idEnd(0)
        {
        }
        void resetDefautlt()
        {
            dateStart = "";
            dateEnd = "";
            idStart = 0;
            idEnd = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(dateStart, 0);
            _os.write(dateEnd, 1);
            if (idStart != 0)
            {
                _os.write(idStart, 2);
            }
            if (idEnd != 0)
            {
                _os.write(idEnd, 3);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dateStart, 0, true);
            _is.read(dateEnd, 1, true);
            _is.read(idStart, 2, false);
            _is.read(idEnd, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(dateStart,"dateStart");
            _ds.display(dateEnd,"dateEnd");
            _ds.display(idStart,"idStart");
            _ds.display(idEnd,"idEnd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(dateStart, true);
            _ds.displaySimple(dateEnd, true);
            _ds.displaySimple(idStart, true);
            _ds.displaySimple(idEnd, false);
            return _os;
        }
    public:
        std::string dateStart;
        std::string dateEnd;
        tars::Int32 idStart;
        tars::Int32 idEnd;
    };
    inline bool operator==(const GetImageListReq&l, const GetImageListReq&r)
    {
        return l.dateStart == r.dateStart && l.dateEnd == r.dateEnd && l.idStart == r.idStart && l.idEnd == r.idEnd;
    }
    inline bool operator!=(const GetImageListReq&l, const GetImageListReq&r)
    {
        return !(l == r);
    }

    struct GetImageListRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "MonitApp.GetImageListRsp";
        }
        static string MD5()
        {
            return "350e3d4a4aed259f7f96fafd70ac25e5";
        }
        GetImageListRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(images, 0);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(images, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(images,"images");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(images, false);
            return _os;
        }
    public:
        vector<MonitApp::ImageInfo> images;
    };
    inline bool operator==(const GetImageListRsp&l, const GetImageListRsp&r)
    {
        return l.images == r.images;
    }
    inline bool operator!=(const GetImageListRsp&l, const GetImageListRsp&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class StructDataGetPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~StructDataGetPrxCallback(){}
        virtual void callback_getImage(tars::Int32 ret,  const MonitApp::GetImageListRsp& resp)
        { throw std::runtime_error("callback_getImage() override incorrect."); }
        virtual void callback_getImage_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getImage_exception() override incorrect."); }

        virtual void callback_test(tars::Int32 ret)
        { throw std::runtime_error("callback_test() override incorrect."); }
        virtual void callback_test_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_test_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __StructDataGet_all[]=
            {
                "getImage",
                "test"
            };
            pair<string*, string*> r = equal_range(__StructDataGet_all, __StructDataGet_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __StructDataGet_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getImage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    MonitApp::GetImageListRsp resp;
                    _is.read(resp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getImage(_ret, resp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_test(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<StructDataGetPrxCallback> StructDataGetPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class StructDataGetPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~StructDataGetPrxCallbackPromise(){}
    public:
        struct PromisegetImage: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            MonitApp::GetImageListRsp resp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StructDataGetPrxCallbackPromise::PromisegetImage > PromisegetImagePtr;

        StructDataGetPrxCallbackPromise(const promise::Promise< StructDataGetPrxCallbackPromise::PromisegetImagePtr > &promise)
        : _promise_getImage(promise)
        {}
        
        virtual void callback_getImage(const StructDataGetPrxCallbackPromise::PromisegetImagePtr &ptr)
        {
            _promise_getImage.setValue(ptr);
        }
        virtual void callback_getImage_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getImage_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getImage.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< StructDataGetPrxCallbackPromise::PromisegetImagePtr > _promise_getImage;

    public:
        struct Promisetest: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< StructDataGetPrxCallbackPromise::Promisetest > PromisetestPtr;

        StructDataGetPrxCallbackPromise(const promise::Promise< StructDataGetPrxCallbackPromise::PromisetestPtr > &promise)
        : _promise_test(promise)
        {}
        
        virtual void callback_test(const StructDataGetPrxCallbackPromise::PromisetestPtr &ptr)
        {
            _promise_test.setValue(ptr);
        }
        virtual void callback_test_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:test_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_test.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< StructDataGetPrxCallbackPromise::PromisetestPtr > _promise_test;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __StructDataGet_all[]=
            {
                "getImage",
                "test"
            };

            pair<string*, string*> r = equal_range(__StructDataGet_all, __StructDataGet_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __StructDataGet_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getImage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    StructDataGetPrxCallbackPromise::PromisegetImagePtr ptr = new StructDataGetPrxCallbackPromise::PromisegetImage();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->resp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getImage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getImage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getImage(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    StructDataGetPrxCallbackPromise::PromisetestPtr ptr = new StructDataGetPrxCallbackPromise::Promisetest();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_test(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<StructDataGetPrxCallbackPromise> StructDataGetPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class StructDataGetCoroPrxCallback: public StructDataGetPrxCallback
    {
    public:
        virtual ~StructDataGetCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __StructDataGet_all[]=
            {
                "getImage",
                "test"
            };

            pair<string*, string*> r = equal_range(__StructDataGet_all, __StructDataGet_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __StructDataGet_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getImage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        MonitApp::GetImageListRsp resp;
                        _is.read(resp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_getImage(_ret, resp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getImage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getImage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_test(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<StructDataGetCoroPrxCallback> StructDataGetCoroPrxCallbackPtr;

    /* proxy for client */
    class StructDataGetProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 getImage(const MonitApp::GetImageListReq & req,MonitApp::GetImageListRsp &resp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            _os.write(resp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getImage", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(resp, 2, true);
            return _ret;
        }

        void async_getImage(StructDataGetPrxCallbackPtr callback,const MonitApp::GetImageListReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getImage", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< StructDataGetPrxCallbackPromise::PromisegetImagePtr > promise_async_getImage(const MonitApp::GetImageListReq &req,const map<string, string>& context)
        {
            promise::Promise< StructDataGetPrxCallbackPromise::PromisegetImagePtr > promise;
            StructDataGetPrxCallbackPromisePtr callback = new StructDataGetPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getImage", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getImage(StructDataGetCoroPrxCallbackPtr callback,const MonitApp::GetImageListReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getImage", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 test(const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_test(StructDataGetPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< StructDataGetPrxCallbackPromise::PromisetestPtr > promise_async_test(const map<string, string>& context)
        {
            promise::Promise< StructDataGetPrxCallbackPromise::PromisetestPtr > promise;
            StructDataGetPrxCallbackPromisePtr callback = new StructDataGetPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_test(StructDataGetCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        StructDataGetProxy* tars_hash(int64_t key)
        {
            return (StructDataGetProxy*)ServantProxy::tars_hash(key);
        }

        StructDataGetProxy* tars_consistent_hash(int64_t key)
        {
            return (StructDataGetProxy*)ServantProxy::tars_consistent_hash(key);
        }

        StructDataGetProxy* tars_set_timeout(int msecond)
        {
            return (StructDataGetProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<StructDataGetProxy> StructDataGetPrx;

    /* servant for server */
    class StructDataGet : public tars::Servant
    {
    public:
        virtual ~StructDataGet(){}
        virtual tars::Int32 getImage(const MonitApp::GetImageListReq & req,MonitApp::GetImageListRsp &resp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getImage(tars::TarsCurrentPtr current, tars::Int32 _ret, const MonitApp::GetImageListRsp &resp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("resp", resp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(resp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 test(tars::TarsCurrentPtr current) = 0;
        static void async_response_test(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __MonitApp__StructDataGet_all[]=
            {
                "getImage",
                "test"
            };

            pair<string*, string*> r = equal_range(__MonitApp__StructDataGet_all, __MonitApp__StructDataGet_all+2, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __MonitApp__StructDataGet_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    MonitApp::GetImageListReq req;
                    MonitApp::GetImageListRsp resp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("resp", resp, resp);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                        _is.read(resp, 2, false);
                    }
                    tars::Int32 _ret = getImage(req,resp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("resp", resp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(resp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                    }
                    else
                    {
                    }
                    tars::Int32 _ret = test(_current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
