// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __IMAGEINFO_H_
#define __IMAGEINFO_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;


namespace MonitApp
{
    enum ImageType
    {
        PNG,
        JPEG,
    };
    inline string etos(const ImageType & e)
    {
        switch(e)
        {
            case PNG: return "PNG";
            case JPEG: return "JPEG";
            default: return "";
        }
    }
    inline int stoe(const string & s, ImageType & e)
    {
        if(s == "PNG")  { e=PNG; return 0;}
        if(s == "JPEG")  { e=JPEG; return 0;}

        return -1;
    }

    struct ImageInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "MonitApp.ImageInfo";
        }
        static string MD5()
        {
            return "47dcb24f2a2130fc745c22d91a5f109c";
        }
        ImageInfo()
        :content(""),imageType(MonitApp::PNG)
        {
        }
        void resetDefautlt()
        {
            content = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(content, 0);
            _os.write((tars::Int32)imageType, 1);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(content, 0, true);
            tars::Int32 eTemp1 = MonitApp::PNG;
            _is.read(eTemp1, 1, false);
            imageType = (MonitApp::ImageType)eTemp1;
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(content,"content");
            _ds.display((tars::Int32)imageType,"imageType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(content, true);
            _ds.displaySimple((tars::Int32)imageType, false);
            return _os;
        }
    public:
        std::string content;
        MonitApp::ImageType imageType;
    };
    inline bool operator==(const ImageInfo&l, const ImageInfo&r)
    {
        return l.content == r.content && l.imageType == r.imageType;
    }
    inline bool operator!=(const ImageInfo&l, const ImageInfo&r)
    {
        return !(l == r);
    }


}



#endif
