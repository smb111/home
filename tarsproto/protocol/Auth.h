// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __AUTH_H_
#define __AUTH_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    enum AUTH_STATE
    {
        AUTH_INIT = -127,
        AUTH_SUCC = 0,
        AUTH_WAIT_RSP = 127,
        AUTH_PROTO_ERR = -100,
        AUTH_WRONG_OBJ = -101,
        AUTH_WRONG_CLIENT = -102,
        AUTH_WRONG_TOKEN = -103,
        AUTH_ERROR = -104,
    };
    inline string etos(const AUTH_STATE & e)
    {
        switch(e)
        {
            case AUTH_INIT: return "AUTH_INIT";
            case AUTH_SUCC: return "AUTH_SUCC";
            case AUTH_WAIT_RSP: return "AUTH_WAIT_RSP";
            case AUTH_PROTO_ERR: return "AUTH_PROTO_ERR";
            case AUTH_WRONG_OBJ: return "AUTH_WRONG_OBJ";
            case AUTH_WRONG_CLIENT: return "AUTH_WRONG_CLIENT";
            case AUTH_WRONG_TOKEN: return "AUTH_WRONG_TOKEN";
            case AUTH_ERROR: return "AUTH_ERROR";
            default: return "";
        }
    }
    inline int stoe(const string & s, AUTH_STATE & e)
    {
        if(s == "AUTH_INIT")  { e=AUTH_INIT; return 0;}
        if(s == "AUTH_SUCC")  { e=AUTH_SUCC; return 0;}
        if(s == "AUTH_WAIT_RSP")  { e=AUTH_WAIT_RSP; return 0;}
        if(s == "AUTH_PROTO_ERR")  { e=AUTH_PROTO_ERR; return 0;}
        if(s == "AUTH_WRONG_OBJ")  { e=AUTH_WRONG_OBJ; return 0;}
        if(s == "AUTH_WRONG_CLIENT")  { e=AUTH_WRONG_CLIENT; return 0;}
        if(s == "AUTH_WRONG_TOKEN")  { e=AUTH_WRONG_TOKEN; return 0;}
        if(s == "AUTH_ERROR")  { e=AUTH_ERROR; return 0;}

        return -1;
    }

    enum AUTH_TYPE
    {
        AUTH_TYPENONE = 0,
        AUTH_TYPEREMOTE = 1,
    };
    inline string etos(const AUTH_TYPE & e)
    {
        switch(e)
        {
            case AUTH_TYPENONE: return "AUTH_TYPENONE";
            case AUTH_TYPEREMOTE: return "AUTH_TYPEREMOTE";
            default: return "";
        }
    }
    inline int stoe(const string & s, AUTH_TYPE & e)
    {
        if(s == "AUTH_TYPENONE")  { e=AUTH_TYPENONE; return 0;}
        if(s == "AUTH_TYPEREMOTE")  { e=AUTH_TYPEREMOTE; return 0;}

        return -1;
    }

    struct TokenKey : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.TokenKey";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        TokenKey()
        :sApplication(""),sServer(""),sObjName("")
        {
        }
        void resetDefautlt()
        {
            sApplication = "";
            sServer = "";
            sObjName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sApplication, 1);
            _os.write(sServer, 2);
            _os.write(sObjName, 3);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sApplication, 1, true);
            _is.read(sServer, 2, true);
            _is.read(sObjName, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sApplication,"sApplication");
            _ds.display(sServer,"sServer");
            _ds.display(sObjName,"sObjName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sApplication, true);
            _ds.displaySimple(sServer, true);
            _ds.displaySimple(sObjName, false);
            return _os;
        }
    public:
        std::string sApplication;
        std::string sServer;
        std::string sObjName;
    };
    inline bool operator==(const TokenKey&l, const TokenKey&r)
    {
        return l.sApplication == r.sApplication && l.sServer == r.sServer && l.sObjName == r.sObjName;
    }
    inline bool operator!=(const TokenKey&l, const TokenKey&r)
    {
        return !(l == r);
    }

    struct AuthRequest : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.AuthRequest";
        }
        static string MD5()
        {
            return "942f55a07abf289c9224ebd1a651ad05";
        }
        AuthRequest()
        :sToken("")
        {
        }
        void resetDefautlt()
        {
            sToken = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
            _os.write(sToken, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
            _is.read(sToken, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            _ds.display(sToken,"sToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, true);
            _ds.displaySimple(sToken, false);
            return _os;
        }
    public:
        tars::TokenKey sKey;
        std::string sToken;
    };
    inline bool operator==(const AuthRequest&l, const AuthRequest&r)
    {
        return l.sKey == r.sKey && l.sToken == r.sToken;
    }
    inline bool operator!=(const AuthRequest&l, const AuthRequest&r)
    {
        return !(l == r);
    }

    struct TokenRequest : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.TokenRequest";
        }
        static string MD5()
        {
            return "14e6636632c63fdfafc03fddb6c460ba";
        }
        TokenRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(vObjName, 1);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vObjName, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(vObjName,"vObjName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(vObjName, false);
            return _os;
        }
    public:
        vector<std::string> vObjName;
    };
    inline bool operator==(const TokenRequest&l, const TokenRequest&r)
    {
        return l.vObjName == r.vObjName;
    }
    inline bool operator!=(const TokenRequest&l, const TokenRequest&r)
    {
        return !(l == r);
    }

    struct TokenResponse : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.TokenResponse";
        }
        static string MD5()
        {
            return "de50d7cd52dae5ef0d013ba49ccdf1a6";
        }
        TokenResponse()
        :sObjName("")
        {
        }
        void resetDefautlt()
        {
            sObjName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sObjName, 1);
            _os.write(mTokens, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sObjName, 1, true);
            _is.read(mTokens, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sObjName,"sObjName");
            _ds.display(mTokens,"mTokens");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sObjName, true);
            _ds.displaySimple(mTokens, false);
            return _os;
        }
    public:
        std::string sObjName;
        map<std::string, std::string> mTokens;
    };
    inline bool operator==(const TokenResponse&l, const TokenResponse&r)
    {
        return l.sObjName == r.sObjName && l.mTokens == r.mTokens;
    }
    inline bool operator!=(const TokenResponse&l, const TokenResponse&r)
    {
        return !(l == r);
    }

    struct ApplyTokenRequest : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.ApplyTokenRequest";
        }
        static string MD5()
        {
            return "6c9a6c3f75eb20f4894fa49a6c7a8a22";
        }
        ApplyTokenRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, false);
            return _os;
        }
    public:
        tars::TokenKey sKey;
    };
    inline bool operator==(const ApplyTokenRequest&l, const ApplyTokenRequest&r)
    {
        return l.sKey == r.sKey;
    }
    inline bool operator!=(const ApplyTokenRequest&l, const ApplyTokenRequest&r)
    {
        return !(l == r);
    }

    struct ApplyTokenResponse : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.ApplyTokenResponse";
        }
        static string MD5()
        {
            return "942f55a07abf289c9224ebd1a651ad05";
        }
        ApplyTokenResponse()
        :sToken("")
        {
        }
        void resetDefautlt()
        {
            sToken = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
            _os.write(sToken, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
            _is.read(sToken, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            _ds.display(sToken,"sToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, true);
            _ds.displaySimple(sToken, false);
            return _os;
        }
    public:
        tars::TokenKey sKey;
        std::string sToken;
    };
    inline bool operator==(const ApplyTokenResponse&l, const ApplyTokenResponse&r)
    {
        return l.sKey == r.sKey && l.sToken == r.sToken;
    }
    inline bool operator!=(const ApplyTokenResponse&l, const ApplyTokenResponse&r)
    {
        return !(l == r);
    }

    struct DeleteTokenRequest : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.DeleteTokenRequest";
        }
        static string MD5()
        {
            return "6c9a6c3f75eb20f4894fa49a6c7a8a22";
        }
        DeleteTokenRequest()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sKey, 1);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sKey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sKey,"sKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sKey, false);
            return _os;
        }
    public:
        tars::TokenKey sKey;
    };
    inline bool operator==(const DeleteTokenRequest&l, const DeleteTokenRequest&r)
    {
        return l.sKey == r.sKey;
    }
    inline bool operator!=(const DeleteTokenRequest&l, const DeleteTokenRequest&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class AuthPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~AuthPrxCallback(){}
        virtual void callback_applyToken(const tars::ApplyTokenResponse& ret)
        { throw std::runtime_error("callback_applyToken() override incorrect."); }
        virtual void callback_applyToken_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_applyToken_exception() override incorrect."); }

        virtual void callback_authProcess(tars::Int32 ret)
        { throw std::runtime_error("callback_authProcess() override incorrect."); }
        virtual void callback_authProcess_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_authProcess_exception() override incorrect."); }

        virtual void callback_deleteToken(tars::Int32 ret)
        { throw std::runtime_error("callback_deleteToken() override incorrect."); }
        virtual void callback_deleteToken_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_deleteToken_exception() override incorrect."); }

        virtual void callback_getTokens(const vector<tars::TokenResponse>& ret)
        { throw std::runtime_error("callback_getTokens() override incorrect."); }
        virtual void callback_getTokens_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getTokens_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };
            pair<string*, string*> r = equal_range(__Auth_all, __Auth_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Auth_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_applyToken_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::ApplyTokenResponse _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_applyToken(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_authProcess_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_authProcess(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_deleteToken_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_deleteToken(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getTokens_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    vector<tars::TokenResponse> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getTokens(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<AuthPrxCallback> AuthPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class AuthPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~AuthPrxCallbackPromise(){}
    public:
        struct PromiseapplyToken: virtual public TC_HandleBase
        {
        public:
            tars::ApplyTokenResponse _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AuthPrxCallbackPromise::PromiseapplyToken > PromiseapplyTokenPtr;

        AuthPrxCallbackPromise(const promise::Promise< AuthPrxCallbackPromise::PromiseapplyTokenPtr > &promise)
        : _promise_applyToken(promise)
        {}
        
        virtual void callback_applyToken(const AuthPrxCallbackPromise::PromiseapplyTokenPtr &ptr)
        {
            _promise_applyToken.setValue(ptr);
        }
        virtual void callback_applyToken_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:applyToken_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_applyToken.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AuthPrxCallbackPromise::PromiseapplyTokenPtr > _promise_applyToken;

    public:
        struct PromiseauthProcess: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AuthPrxCallbackPromise::PromiseauthProcess > PromiseauthProcessPtr;

        AuthPrxCallbackPromise(const promise::Promise< AuthPrxCallbackPromise::PromiseauthProcessPtr > &promise)
        : _promise_authProcess(promise)
        {}
        
        virtual void callback_authProcess(const AuthPrxCallbackPromise::PromiseauthProcessPtr &ptr)
        {
            _promise_authProcess.setValue(ptr);
        }
        virtual void callback_authProcess_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:authProcess_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_authProcess.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AuthPrxCallbackPromise::PromiseauthProcessPtr > _promise_authProcess;

    public:
        struct PromisedeleteToken: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AuthPrxCallbackPromise::PromisedeleteToken > PromisedeleteTokenPtr;

        AuthPrxCallbackPromise(const promise::Promise< AuthPrxCallbackPromise::PromisedeleteTokenPtr > &promise)
        : _promise_deleteToken(promise)
        {}
        
        virtual void callback_deleteToken(const AuthPrxCallbackPromise::PromisedeleteTokenPtr &ptr)
        {
            _promise_deleteToken.setValue(ptr);
        }
        virtual void callback_deleteToken_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:deleteToken_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_deleteToken.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AuthPrxCallbackPromise::PromisedeleteTokenPtr > _promise_deleteToken;

    public:
        struct PromisegetTokens: virtual public TC_HandleBase
        {
        public:
            vector<tars::TokenResponse> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< AuthPrxCallbackPromise::PromisegetTokens > PromisegetTokensPtr;

        AuthPrxCallbackPromise(const promise::Promise< AuthPrxCallbackPromise::PromisegetTokensPtr > &promise)
        : _promise_getTokens(promise)
        {}
        
        virtual void callback_getTokens(const AuthPrxCallbackPromise::PromisegetTokensPtr &ptr)
        {
            _promise_getTokens.setValue(ptr);
        }
        virtual void callback_getTokens_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getTokens_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getTokens.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< AuthPrxCallbackPromise::PromisegetTokensPtr > _promise_getTokens;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };

            pair<string*, string*> r = equal_range(__Auth_all, __Auth_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Auth_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_applyToken_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AuthPrxCallbackPromise::PromiseapplyTokenPtr ptr = new AuthPrxCallbackPromise::PromiseapplyToken();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_applyToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_applyToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_applyToken(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_authProcess_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AuthPrxCallbackPromise::PromiseauthProcessPtr ptr = new AuthPrxCallbackPromise::PromiseauthProcess();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_authProcess_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_authProcess_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_authProcess(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_deleteToken_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AuthPrxCallbackPromise::PromisedeleteTokenPtr ptr = new AuthPrxCallbackPromise::PromisedeleteToken();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_deleteToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_deleteToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_deleteToken(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getTokens_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    AuthPrxCallbackPromise::PromisegetTokensPtr ptr = new AuthPrxCallbackPromise::PromisegetTokens();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getTokens_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getTokens_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getTokens(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<AuthPrxCallbackPromise> AuthPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class AuthCoroPrxCallback: public AuthPrxCallback
    {
    public:
        virtual ~AuthCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };

            pair<string*, string*> r = equal_range(__Auth_all, __Auth_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Auth_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_applyToken_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::ApplyTokenResponse _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_applyToken(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_applyToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_applyToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_authProcess_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_authProcess(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_authProcess_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_authProcess_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_deleteToken_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_deleteToken(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_deleteToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_deleteToken_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getTokens_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        vector<tars::TokenResponse> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_getTokens(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getTokens_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getTokens_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<AuthCoroPrxCallback> AuthCoroPrxCallbackPtr;

    /* proxy for client */
    class AuthProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::ApplyTokenResponse applyToken(const tars::ApplyTokenRequest & request,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"applyToken", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::ApplyTokenResponse _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_applyToken(AuthPrxCallbackPtr callback,const tars::ApplyTokenRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"applyToken", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AuthPrxCallbackPromise::PromiseapplyTokenPtr > promise_async_applyToken(const tars::ApplyTokenRequest &request,const map<string, string>& context)
        {
            promise::Promise< AuthPrxCallbackPromise::PromiseapplyTokenPtr > promise;
            AuthPrxCallbackPromisePtr callback = new AuthPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"applyToken", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_applyToken(AuthCoroPrxCallbackPtr callback,const tars::ApplyTokenRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"applyToken", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 authProcess(const tars::AuthRequest & request,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"authProcess", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_authProcess(AuthPrxCallbackPtr callback,const tars::AuthRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"authProcess", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AuthPrxCallbackPromise::PromiseauthProcessPtr > promise_async_authProcess(const tars::AuthRequest &request,const map<string, string>& context)
        {
            promise::Promise< AuthPrxCallbackPromise::PromiseauthProcessPtr > promise;
            AuthPrxCallbackPromisePtr callback = new AuthPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"authProcess", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_authProcess(AuthCoroPrxCallbackPtr callback,const tars::AuthRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"authProcess", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 deleteToken(const tars::DeleteTokenRequest & request,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"deleteToken", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_deleteToken(AuthPrxCallbackPtr callback,const tars::DeleteTokenRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"deleteToken", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AuthPrxCallbackPromise::PromisedeleteTokenPtr > promise_async_deleteToken(const tars::DeleteTokenRequest &request,const map<string, string>& context)
        {
            promise::Promise< AuthPrxCallbackPromise::PromisedeleteTokenPtr > promise;
            AuthPrxCallbackPromisePtr callback = new AuthPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"deleteToken", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_deleteToken(AuthCoroPrxCallbackPtr callback,const tars::DeleteTokenRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"deleteToken", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        vector<tars::TokenResponse> getTokens(const tars::TokenRequest & request,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getTokens", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            vector<tars::TokenResponse> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_getTokens(AuthPrxCallbackPtr callback,const tars::TokenRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getTokens", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< AuthPrxCallbackPromise::PromisegetTokensPtr > promise_async_getTokens(const tars::TokenRequest &request,const map<string, string>& context)
        {
            promise::Promise< AuthPrxCallbackPromise::PromisegetTokensPtr > promise;
            AuthPrxCallbackPromisePtr callback = new AuthPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getTokens", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getTokens(AuthCoroPrxCallbackPtr callback,const tars::TokenRequest &request,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(request, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getTokens", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        AuthProxy* tars_hash(int64_t key)
        {
            return (AuthProxy*)ServantProxy::tars_hash(key);
        }

        AuthProxy* tars_consistent_hash(int64_t key)
        {
            return (AuthProxy*)ServantProxy::tars_consistent_hash(key);
        }

        AuthProxy* tars_set_timeout(int msecond)
        {
            return (AuthProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<AuthProxy> AuthPrx;

    /* servant for server */
    class Auth : public tars::Servant
    {
    public:
        virtual ~Auth(){}
        virtual tars::ApplyTokenResponse applyToken(const tars::ApplyTokenRequest & request,tars::TarsCurrentPtr current) = 0;
        static void async_response_applyToken(tars::TarsCurrentPtr current, const tars::ApplyTokenResponse &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 authProcess(const tars::AuthRequest & request,tars::TarsCurrentPtr current) = 0;
        static void async_response_authProcess(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 deleteToken(const tars::DeleteTokenRequest & request,tars::TarsCurrentPtr current) = 0;
        static void async_response_deleteToken(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual vector<tars::TokenResponse> getTokens(const tars::TokenRequest & request,tars::TarsCurrentPtr current) = 0;
        static void async_response_getTokens(tars::TarsCurrentPtr current, const vector<tars::TokenResponse> &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__Auth_all[]=
            {
                "applyToken",
                "authProcess",
                "deleteToken",
                "getTokens"
            };

            pair<string*, string*> r = equal_range(__tars__Auth_all, __tars__Auth_all+4, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__Auth_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::ApplyTokenRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("request", request);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    tars::ApplyTokenResponse _ret = applyToken(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::AuthRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("request", request);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    tars::Int32 _ret = authProcess(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::DeleteTokenRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("request", request);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    tars::Int32 _ret = deleteToken(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::TokenRequest request;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("request", request);
                    }
                    else
                    {
                        _is.read(request, 1, true);
                    }
                    vector<tars::TokenResponse> _ret = getTokens(request, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
